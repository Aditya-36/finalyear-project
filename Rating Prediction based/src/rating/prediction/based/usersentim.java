/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rating.prediction.based;

import java.io.File;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import searchh.SubstringCounter;

/**
 *
 * @author java1
 */
public class usersentim extends javax.swing.JFrame {
    
    Connection con,conn;
    static Statement st,stt;
    static ResultSet rs,rss; 
    static String path;
    static int row;
static String s,name;
String filename;
    private int i;
      String sentimental ;
     String sentimental_itemid ;
     String sentimental_userid ;
     String sentimental_feedback ;

    /**
     * Creates new form usersentim
     */
    public usersentim() {
        try {
            initComponents();
             con =  dobc.getConne();
                        st = (Statement) con.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jButton9 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable2.setFont(new java.awt.Font("Baskerville Old Face", 1, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTable2);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 450, 230));

        jButton1.setBackground(new java.awt.Color(153, 153, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("LEVEL5");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 480, 130, 30));
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 330, 110, 40));

        jButton2.setBackground(new java.awt.Color(153, 153, 0));
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton2.setText("view");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 210, 100, 40));

        jButton3.setBackground(new java.awt.Color(153, 153, 0));
        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton3.setText("Product Features");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 480, 160, 30));

        jButton4.setBackground(new java.awt.Color(153, 153, 0));
        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton4.setText("LEVEL1");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, 130, 30));

        jButton5.setBackground(new java.awt.Color(153, 153, 0));
        jButton5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton5.setText("LEVEL2");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 430, 130, 30));

        jButton6.setBackground(new java.awt.Color(153, 153, 0));
        jButton6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton6.setText("LEVEL3");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 430, 130, 30));

        jButton7.setBackground(new java.awt.Color(153, 153, 0));
        jButton7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton7.setText("LEVEL4");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 430, 130, 30));

        jButton8.setBackground(new java.awt.Color(153, 153, 0));
        jButton8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton8.setText("CLEAR");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 280, 100, 40));
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 120, 160, 30));

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "------SELECTED_ANY_ITEMS------", "BEAUTY&SPA", "HOME_SERVICE", "HOTEL&TRAVEL", "NIGHT_LIFE", "RESTAURANTS", "SHOPPING", "PETS", " " }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 280, 29));

        jButton9.setBackground(new java.awt.Color(153, 153, 0));
        jButton9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton9.setText("NEXT");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 70, 80, 30));

        jLabel4.setFont(new java.awt.Font("Bodoni MT Black", 1, 18)); // NOI18N
        jLabel4.setText("SENTIMENTAL SIMILARITY FEEDBACK EACH ITEMS");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 590, 30));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("ITEM ID");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(134, 124, 110, 20));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rating/prediction/based/bgg.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 650, 520));

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-677)/2, (screenSize.height-562)/2, 677, 562);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
 System.out.println("Connected to the database");
        String str=(String)jComboBox1.getSelectedItem();
        Object selectedItem = jComboBox1.getSelectedItem();
         if(str.equals("BEAUTY&SPA"))
        {
            sentimental  ="beauty_user_feedback";
            sentimental_itemid ="beauty_item_id";
            sentimental_userid ="beauty_user_id";
            sentimental_feedback ="beauty_feedback";

            

        }
        else  if(str.equals("HOME_SERVICE"))
        {
            sentimental  ="homeser_user_feedback";
            sentimental_itemid ="homeser_itemid";
            sentimental_userid ="homeser_userid";
            sentimental_feedback ="homeser_userfeed";

        }
        else  if(str.equals("HOTEL&TRAVEL"))
        {
            sentimental  ="hotels_user_feedback";
            sentimental_itemid ="hotel_itemid";
            sentimental_userid ="hotels_userid";
            sentimental_feedback ="hotels_feedback";

        }
        else  if(str.equals("NIGHT_LIFE"))
        {
            sentimental  ="nightnife_user_feedback";
            sentimental_itemid ="night_itemid";
            sentimental_userid ="night_userid";
            sentimental_feedback ="night_feedback";

        }
        else  if(str.equals("RESTAURANTS"))
        {
           sentimental  ="restaruan_feedback";
            sentimental_itemid ="restaruant_itemid";
            sentimental_userid ="restaruant_userid";
            sentimental_feedback ="restaruan_feedback";

        }
        else  if(str.equals("SHOPPING"))
        {
            sentimental  ="shopping_user_feedback";
            sentimental_itemid ="shopping_itemid";
            sentimental_userid ="shopping_userid";
            sentimental_feedback ="shopping_feedback";

        }
        else  if(str.equals("PETS"))
        {
            sentimental  ="pet_user_feedback";
            sentimental_itemid ="pet_itemid";
             sentimental_userid ="pet_userid";
            sentimental_feedback ="pet_feedback";
        }

        if (selectedItem.equals("------SELECTED_ANY_ITEMS------"))
        {

            JOptionPane.showMessageDialog(rootPane, "please select any items ");

        }
        else
        {
       String useridd = jTextField2.getText();
             Integer count=0;
              List<String> timesArray = new ArrayList<String>();
              
            File file = new File("D:\\level\\level-5.txt");
           
            Scanner scanner = null;
            try {
                scanner = new Scanner(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SubstringCounter.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (scanner.hasNextLine()) {
            try {
                String[] times = scanner.nextLine().split("\t");
                for (String time : times) {
                    timesArray.add(time);
                }
                System.out.println(timesArray);
            String text=null;
            String userids;
             String  itemid;
            
            ResultSet rs8; 
            Connection  con8 = dobc.getConne();
            Statement  st8 = (Statement) con8.createStatement();
            rs8 = (ResultSet) st8.executeQuery("SELECT *  FROM  "+sentimental+" where "+sentimental_itemid +"  = '"+useridd+"' ");
                  while(rs8.next())
                   {
                try {
                   userids = rs8.getString(sentimental_userid);
                    itemid = rs8.getString(sentimental_itemid);
                     String feed = rs8.getString(sentimental_feedback );
      text = feed;


     String[] regexp = times;
     for (int i=0;i<=regexp.length-1;i++)
     {
     System.out.println(regexp[i]);
         Pattern pattern = Pattern.compile(regexp[i]);
     Matcher matcher = pattern.matcher(text);
    
     for (count = 0; matcher.find(); count++)
         ;
     String status = "dsfds";
      String textt = "fgdfg";
     System.out.println("Count: " + count);
     Connection  con7 =  dobc.getConne();
    Statement st7=con7.createStatement();
    String sql="insert into userresult(item_id,user_id,count,word) values ('"+itemid+"','"+ userids+"','"+count+"','"+regexp[i]+"')";
    int x=st7.executeUpdate(sql);
    if(x!=0){
		System.out.println("not inserted");
	
		}
				else{
		
		System.out.println("uninserted");
		}

     }   
     
     System.out.println("userid: " + userids);
     System.out.println("Count: " +text);
     
     
        
                   }
                    catch (SQLException ex) {                  
                        Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
                    }                  
       
    }             con8.close();
        st8.close();
            
            } catch (SQLException ex) {
                Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Vector col = new Vector();
        Vector data = new Vector();
        System.out.println("Connected to the database");
        String str=(String)jComboBox1.getSelectedItem();
        Object selectedItem = jComboBox1.getSelectedItem();
         if(str.equals("BEAUTY&SPA"))
        {
            sentimental  ="beauty_user_feedback";
            sentimental_itemid ="beauty_item_id";
            

        }
        else  if(str.equals("HOME_SERVICE"))
        {
            sentimental  ="homeser_user_feedback";
            sentimental_itemid ="homeser_itemid";

        }
        else  if(str.equals("HOTEL&TRAVEL"))
        {
            sentimental  ="hotels_user_feedback";
            sentimental_itemid ="hotel_itemid";

        }
        else  if(str.equals("NIGHT_LIFE"))
        {
            sentimental  ="nightnife_user_feedback";
            sentimental_itemid ="night_itemid";

        }
        else  if(str.equals("RESTAURANTS"))
        {
           sentimental  ="restaruan_feedback";
            sentimental_itemid ="restaruant_itemid";

        }
        else  if(str.equals("SHOPPING"))
        {
            sentimental  ="shopping_user_feedback";
            sentimental_itemid ="shopping_itemid";

        }
        else  if(str.equals("PETS"))
        {
            sentimental  ="pet_user_feedback";
            sentimental_itemid ="pet_itemid";
        }

        if (selectedItem.equals("------SELECTED_ANY_ITEMS------"))
        {

            JOptionPane.showMessageDialog(rootPane, "please select any items ");

        }
        else
        {
        
        try {
            
             conn =  dobc.getConne();
             stt = (Statement) conn.createStatement();
                rss = (ResultSet) stt.executeQuery("SELECT * FROM `userresult` where count>=2 ORDER BY user_id DESC; ");
                ResultSetMetaData md = (ResultSetMetaData) rss.getMetaData();
                int columns = md.getColumnCount();
                int count=0;
                for (int i = 1; i <= columns; i++) {
                    col.addElement(md.getColumnName(i));
                }

                while (rss.next()) {
                    count++;
                    Vector row = new Vector(columns);
                    for (int i = 1; i <= columns; i++) {
                        row.addElement(rss.getObject(i));

                    }

                    data.addElement(row);
                }
                jTextField1.setText(Integer.toString(count));

                DefaultTableModel model = new DefaultTableModel(data, col);
                jTable2.setModel(model);
                JOptionPane.showMessageDialog(null, "interpersonal sentimental product items");
            } catch (SQLException ex) {
                Logger.getLogger(semetrustiuser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        System.out.println("Connected to the database");
        String str=(String)jComboBox1.getSelectedItem();
        Object selectedItem = jComboBox1.getSelectedItem();
         if(str.equals("BEAUTY&SPA"))
        {
            sentimental  ="beauty_user_feedback";
            sentimental_itemid ="beauty_item_id";
            sentimental_userid ="beauty_user_id";
            sentimental_feedback ="beauty_feedback";

            

        }
        else  if(str.equals("HOME_SERVICE"))
        {
            sentimental  ="homeser_user_feedback";
            sentimental_itemid ="homeser_itemid";
            sentimental_userid ="homeser_userid";
            sentimental_feedback ="homeser_userfeed";

        }
        else  if(str.equals("HOTEL&TRAVEL"))
        {
            sentimental  ="hotels_user_feedback";
            sentimental_itemid ="hotel_itemid";
            sentimental_userid ="hotels_userid";
            sentimental_feedback ="hotels_feedback";

        }
        else  if(str.equals("NIGHT_LIFE"))
        {
            sentimental  ="nightnife_user_feedback";
            sentimental_itemid ="night_itemid";
            sentimental_userid ="night_userid";
            sentimental_feedback ="night_feedback";

        }
        else  if(str.equals("RESTAURANTS"))
        {
           sentimental  ="restaruan_feedback";
            sentimental_itemid ="restaruant_itemid";
            sentimental_userid ="restaruant_userid";
            sentimental_feedback ="restaruan_feedback";

        }
        else  if(str.equals("SHOPPING"))
        {
            sentimental  ="shopping_user_feedback";
            sentimental_itemid ="shopping_itemid";
            sentimental_userid ="shopping_userid";
            sentimental_feedback ="shopping_feedback";

        }
        else  if(str.equals("PETS"))
        {
            sentimental  ="pet_user_feedback";
            sentimental_itemid ="pet_itemid";
             sentimental_userid ="pet_userid";
            sentimental_feedback ="pet_feedback";
        }

        if (selectedItem.equals("------SELECTED_ANY_ITEMS------"))
        {

            JOptionPane.showMessageDialog(rootPane, "please select any items ");

        }
        else
        {
        String useridd = jTextField2.getText();
             Integer count=0;
              List<String> timesArray = new ArrayList<String>();
              
            File file = new File("D:\\level\\Features.txt");
           
            Scanner scanner = null;
            try {
                scanner = new Scanner(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SubstringCounter.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (scanner.hasNextLine()) {
            try {
                String[] times = scanner.nextLine().split("\t");
                for (String time : times) {
                    timesArray.add(time);
                }
                System.out.println(timesArray);
            String text=null;
            String userids;
             String  itemid;
            
            ResultSet rs9; 
            Connection  con9 =  rating.prediction.based.dobc.getConne();
            Statement  st9 = (Statement) con9.createStatement();
            rs9 = (ResultSet) st9.executeQuery("SELECT *  FROM  "+sentimental+" where "+sentimental_itemid+"  = '"+useridd+"' ");
                  while(rs9.next())
                   {
                try {
                   userids = rs9.getString(sentimental_userid);
                    itemid = rs9.getString(sentimental_itemid);
                     String feed = rs9.getString(sentimental_feedback );
      text = feed;


     String[] regexp = times;
     for (int i=0;i<=regexp.length-1;i++)
     {
     System.out.println(regexp[i]);
         Pattern pattern = Pattern.compile(regexp[i]);
     Matcher matcher = pattern.matcher(text);
    
     for (count = 0; matcher.find(); count++)
         ;
     String status = "dsfds";
      String textt = "fgdfg";
     System.out.println("Count: " + count);
     Connection  conn9 =  dobc.getConne();
    Statement stn9=conn9.createStatement();
    String sql="insert into userresult(item_id,user_id,count,word) values ('"+itemid+"','"+ userids+"','"+count+"','"+regexp[i]+"')";
    int x=stn9.executeUpdate(sql);
    if(x!=0){
		System.out.println("not inserted");
	
		}
				else{
		
		System.out.println("uninserted");
		}
//        con.close();
//        st.close();
     }   
     
     System.out.println("userid: " + userids);
     System.out.println("Count: " +text);
     
     
        
                   }
                    catch (SQLException ex) {                  
                        Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
                    }                  
       
    }            con9.close();

            
            } catch (SQLException ex) {
                Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        System.out.println("Connected to the database");
        String str=(String)jComboBox1.getSelectedItem();
        Object selectedItem = jComboBox1.getSelectedItem();
         if(str.equals("BEAUTY&SPA"))
        {
            sentimental  ="beauty_user_feedback";
            sentimental_itemid ="beauty_item_id";
            sentimental_userid ="beauty_user_id";
            sentimental_feedback ="beauty_feedback";

            

        }
        else  if(str.equals("HOME_SERVICE"))
        {
            sentimental  ="homeser_user_feedback";
            sentimental_itemid ="homeser_itemid";
            sentimental_userid ="homeser_userid";
            sentimental_feedback ="homeser_userfeed";

        }
        else  if(str.equals("HOTEL&TRAVEL"))
        {
            sentimental  ="hotels_user_feedback";
            sentimental_itemid ="hotel_itemid";
            sentimental_userid ="hotels_userid";
            sentimental_feedback ="hotels_feedback";

        }
        else  if(str.equals("NIGHT_LIFE"))
        {
            sentimental  ="nightnife_user_feedback";
            sentimental_itemid ="night_itemid";
            sentimental_userid ="night_userid";
            sentimental_feedback ="night_feedback";

        }
        else  if(str.equals("RESTAURANTS"))
        {
           sentimental  ="restaruan_feedback";
            sentimental_itemid ="restaruant_itemid";
            sentimental_userid ="restaruant_userid";
            sentimental_feedback ="restaruan_feedback";

        }
        else  if(str.equals("SHOPPING"))
        {
            sentimental  ="shopping_user_feedback";
            sentimental_itemid ="shopping_itemid";
            sentimental_userid ="shopping_userid";
            sentimental_feedback ="shopping_feedback";

        }
        else  if(str.equals("PETS"))
        {
            sentimental  ="pet_user_feedback";
            sentimental_itemid ="pet_itemid";
             sentimental_userid ="pet_userid";
            sentimental_feedback ="pet_feedback";
        }

        if (selectedItem.equals("------SELECTED_ANY_ITEMS------"))
        {

            JOptionPane.showMessageDialog(rootPane, "please select any items ");

        }
        else
        {
        
        String useridd = jTextField2.getText();
             Integer count=0;
              List<String> timesArray = new ArrayList<String>();
              
            File file = new File("D:\\level\\level-1.txt");
           
            Scanner scanner = null;
            try {
                scanner = new Scanner(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SubstringCounter.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (scanner.hasNextLine()) {
            try {
                String[] times = scanner.nextLine().split("\t");
                for (String time : times) {
                    timesArray.add(time);
                }
                System.out.println(timesArray);
            String text=null;
            String userids;
             String  itemid;
            
            ResultSet rs1; 
            Connection  con1 =  rating.prediction.based.dobc.getConne();
            Statement  st1 = (Statement) con1.createStatement();
            rs1 = (ResultSet) st1.executeQuery("SELECT *  FROM  "+sentimental+" where "+sentimental_itemid +"  = '"+useridd+"' ");
                  while(rs1.next())
                   {
                try {
                    userids = rs1.getString(sentimental_userid);
                    itemid = rs1.getString(sentimental_itemid);
                     String feed = rs1.getString(sentimental_feedback );
      text = feed;


     String[] regexp = times;
     for (int i=0;i<=regexp.length-1;i++)
     {
     System.out.println(regexp[i]);
         Pattern pattern = Pattern.compile(regexp[i]);
     Matcher matcher = pattern.matcher(text);
    
     for (count = 0; matcher.find(); count++)
         ;
     String status = "dsfds";
      String textt = "fgdfg";
     System.out.println("Count: " + count);
     Connection  con2 =  dobc.getConne();
    Statement st2=con2.createStatement();
    String sql="insert into userresult(item_id,user_id,count,word) values ('"+itemid+"','"+ userids+"','"+count+"','"+regexp[i]+"')";
    int x=st2.executeUpdate(sql);
    if(x!=0){
		System.out.println("not inserted");
	
		}
				else{
		
		System.out.println("uninserted");
		}
        con2.close();
        st2.close();
     }   
     
     System.out.println("userid: " + userids);
     System.out.println("Count: " +text);
     
     
        
                   }
                
                    catch (SQLException ex) {                  
                        Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
                    }                  
       
    }        con.close();
            } catch (SQLException ex) {
                Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         System.out.println("Connected to the database");
        String str=(String)jComboBox1.getSelectedItem();
        Object selectedItem = jComboBox1.getSelectedItem();
        if(str.equals("BEAUTY&SPA"))
        {
            sentimental  ="beauty_user_feedback";
            sentimental_itemid ="beauty_item_id";
            sentimental_userid ="beauty_user_id";
            sentimental_feedback ="beauty_feedback";

            

        }
        else  if(str.equals("HOME_SERVICE"))
        {
            sentimental  ="homeser_user_feedback";
            sentimental_itemid ="homeser_itemid";
            sentimental_userid ="homeser_userid";
            sentimental_feedback ="homeser_userfeed";

        }
        else  if(str.equals("HOTEL&TRAVEL"))
        {
            sentimental  ="hotels_user_feedback";
            sentimental_itemid ="hotel_itemid";
            sentimental_userid ="hotels_userid";
            sentimental_feedback ="hotels_feedback";

        }
        else  if(str.equals("NIGHT_LIFE"))
        {
            sentimental  ="nightnife_user_feedback";
            sentimental_itemid ="night_itemid";
            sentimental_userid ="night_userid";
            sentimental_feedback ="night_feedback";

        }
        else  if(str.equals("RESTAURANTS"))
        {
           sentimental  ="restaruan_feedback";
            sentimental_itemid ="restaruant_itemid";
            sentimental_userid ="restaruant_userid";
            sentimental_feedback ="restaruan_feedback";

        }
        else  if(str.equals("SHOPPING"))
        {
            sentimental  ="shopping_user_feedback";
            sentimental_itemid ="shopping_itemid";
            sentimental_userid ="shopping_userid";
            sentimental_feedback ="shopping_feedback";

        }
        else  if(str.equals("PETS"))
        {
            sentimental  ="pet_user_feedback";
            sentimental_itemid ="pet_itemid";
             sentimental_userid ="pet_userid";
            sentimental_feedback ="pet_feedback";
        }


        if (selectedItem.equals("------SELECTED_ANY_ITEMS------"))
        {

            JOptionPane.showMessageDialog(rootPane, "please select any items ");

        }
        else
        {   
        String useridd = jTextField2.getText();
             Integer count=0;
              List<String> timesArray = new ArrayList<String>();
              
            File file = new File("D:\\level\\level-2.txt");
           
            Scanner scanner = null;
            try {
                scanner = new Scanner(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SubstringCounter.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (scanner.hasNextLine()) {
            try {
                String[] times = scanner.nextLine().split("\t");
                for (String time : times) {
                    timesArray.add(time);
                }
                System.out.println(timesArray);
            String text=null;
            String userids;
             String  itemid;
            
            ResultSet rs3; 
            Connection  con3 =  dobc.getConne();
            Statement  st3 = (Statement) con3.createStatement();
            rs3 = (ResultSet) st3.executeQuery("SELECT *  FROM  "+sentimental+" where "+sentimental_itemid +"  = '"+useridd+"' ");
                  while(rs3.next())
                   {
                try {
                   userids = rs3.getString(sentimental_userid);
                    itemid = rs3.getString(sentimental_itemid);
                     String feed = rs3.getString(sentimental_feedback );
      text = feed;


     String[] regexp = times;
     for (int i=0;i<=regexp.length-1;i++)
     {
     System.out.println(regexp[i]);
         Pattern pattern = Pattern.compile(regexp[i]);
     Matcher matcher = pattern.matcher(text);
    
     for (count = 0; matcher.find(); count++)
         ;
     String status = "dsfds";
      String textt = "fgdfg";
     System.out.println("Count: " + count);
     Connection  con4 =  searchh.dobc.getConne();
    Statement st4=con4.createStatement();
    String sql="insert into userresult(item_id,user_id,count,word) values ('"+itemid+"','"+ userids+"','"+count+"','"+regexp[i]+"')";
    int x=st4.executeUpdate(sql);
    if(x!=0){
		System.out.println("not inserted");
	
		}
				else{
		
		System.out.println("uninserted");
		}
       
     }   
     
     System.out.println("userid: " + userids);
     System.out.println("Count: " +text);
     
      
      
        
                   }
                    catch (SQLException ex) {                  
                        Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
                    }                  
       
    }        con3.close();
       st3.close();
            } catch (SQLException ex) {
                Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        System.out.println("Connected to the database");
        String str=(String)jComboBox1.getSelectedItem();
        Object selectedItem = jComboBox1.getSelectedItem();
         if(str.equals("BEAUTY&SPA"))
        {
            sentimental  ="beauty_user_feedback";
            sentimental_itemid ="beauty_item_id";
            sentimental_userid ="beauty_user_id";
            sentimental_feedback ="beauty_feedback";

            

        }
        else  if(str.equals("HOME_SERVICE"))
        {
            sentimental  ="homeser_user_feedback";
            sentimental_itemid ="homeser_itemid";
            sentimental_userid ="homeser_userid";
            sentimental_feedback ="homeser_userfeed";

        }
        else  if(str.equals("HOTEL&TRAVEL"))
        {
            sentimental  ="hotels_user_feedback";
            sentimental_itemid ="hotel_itemid";
            sentimental_userid ="hotels_userid";
            sentimental_feedback ="hotels_feedback";

        }
        else  if(str.equals("NIGHT_LIFE"))
        {
            sentimental  ="nightnife_user_feedback";
            sentimental_itemid ="night_itemid";
            sentimental_userid ="night_userid";
            sentimental_feedback ="night_feedback";

        }
        else  if(str.equals("RESTAURANTS"))
        {
           sentimental  ="restaruan_feedback";
            sentimental_itemid ="restaruant_itemid";
            sentimental_userid ="restaruant_userid";
            sentimental_feedback ="restaruan_feedback";

        }
        else  if(str.equals("SHOPPING"))
        {
            sentimental  ="shopping_user_feedback";
            sentimental_itemid ="shopping_itemid";
            sentimental_userid ="shopping_userid";
            sentimental_feedback ="shopping_feedback";

        }
        else  if(str.equals("PETS"))
        {
            sentimental  ="pet_user_feedback";
            sentimental_itemid ="pet_itemid";
             sentimental_userid ="pet_userid";
            sentimental_feedback ="pet_feedback";
        }


        if (selectedItem.equals("------SELECTED_ANY_ITEMS------"))
        {

            JOptionPane.showMessageDialog(rootPane, "please select any items ");

        }
        else
        {
        String useridd = jTextField2.getText();
             Integer count=0;
              List<String> timesArray = new ArrayList<String>();
              
            File file = new File("D:\\level\\level-3.txt");
           
            Scanner scanner = null;
            try {
                scanner = new Scanner(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SubstringCounter.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (scanner.hasNextLine()) {
            try {
                String[] times = scanner.nextLine().split("\t");
                for (String time : times) {
                    timesArray.add(time);
                }
                System.out.println(timesArray);
            String text=null;
            String userids;
             String  itemid;
            
            ResultSet rs5; 
            Connection  con5 =  dobc.getConne();
            Statement  st5 = (Statement) con5.createStatement();
            rs5 = (ResultSet) st5.executeQuery("SELECT *  FROM  "+sentimental+" where "+sentimental_itemid +"  = '"+useridd+"' ");
                  while(rs5.next())
                   {
                try {
                   userids = rs5.getString(sentimental_userid);
                    itemid = rs5.getString(sentimental_itemid);
                     String feed = rs5.getString(sentimental_feedback );
      text = feed;


     String[] regexp = times;
     for (int i=0;i<=regexp.length-1;i++)
     {
     System.out.println(regexp[i]);
         Pattern pattern = Pattern.compile(regexp[i]);
     Matcher matcher = pattern.matcher(text);
    
     for (count = 0; matcher.find(); count++)
         ;
     String status = "dsfds";
      String textt = "fgdfg";
     System.out.println("Count: " + count);
     Connection  con6 = dobc.getConne();
    Statement st6=con6.createStatement();
    String sql="insert into userresult(item_id,user_id,count,word) values ('"+itemid+"','"+ userids+"','"+count+"','"+regexp[i]+"')";
    int x=st6.executeUpdate(sql);
    if(x!=0){
		System.out.println("not inserted");
	
		}
				else{
		
		System.out.println("uninserted");
		}

     }   
     
     System.out.println("userid: " + userids);
     System.out.println("Count: " +text);
     
     
         
                   }
                    catch (SQLException ex) {                  
                        Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
                    }                  
       
    }      con5.close();
            
            } catch (SQLException ex) {
                Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
       System.out.println("Connected to the database");
        String str=(String)jComboBox1.getSelectedItem();
        Object selectedItem = jComboBox1.getSelectedItem();
        if(str.equals("BEAUTY&SPA"))
        {
            sentimental  ="beauty_user_feedback";
            sentimental_itemid ="beauty_item_id";
            sentimental_userid ="beauty_user_id";
            sentimental_feedback ="beauty_feedback";

            

        }
        else  if(str.equals("HOME_SERVICE"))
        {
            sentimental  ="homeser_user_feedback";
            sentimental_itemid ="homeser_itemid";
            sentimental_userid ="homeser_userid";
            sentimental_feedback ="homeser_userfeed";

        }
        else  if(str.equals("HOTEL&TRAVEL"))
        {
            sentimental  ="hotels_user_feedback";
            sentimental_itemid ="hotel_itemid";
            sentimental_userid ="hotels_userid";
            sentimental_feedback ="hotels_feedback";

        }
        else  if(str.equals("NIGHT_LIFE"))
        {
            sentimental  ="nightnife_user_feedback";
            sentimental_itemid ="night_itemid";
            sentimental_userid ="night_userid";
            sentimental_feedback ="night_feedback";

        }
        else  if(str.equals("RESTAURANTS"))
        {
           sentimental  ="restaruan_feedback";
            sentimental_itemid ="restaruant_itemid";
            sentimental_userid ="restaruant_userid";
            sentimental_feedback ="restaruan_feedback";

        }
        else  if(str.equals("SHOPPING"))
        {
            sentimental  ="shopping_user_feedback";
            sentimental_itemid ="shopping_itemid";
            sentimental_userid ="shopping_userid";
            sentimental_feedback ="shopping_feedback";

        }
        else  if(str.equals("PETS"))
        {
            sentimental  ="pet_user_feedback";
            sentimental_itemid ="pet_itemid";
             sentimental_userid ="pet_userid";
            sentimental_feedback ="pet_feedback";
        }


        if (selectedItem.equals("------SELECTED_ANY_ITEMS------"))
        {

            JOptionPane.showMessageDialog(rootPane, "please select any items ");

        }
        else
        {
        String useridd = jTextField1.getText();
             Integer count=0;
              List<String> timesArray = new ArrayList<String>();
              
            File file = new File("D:\\level\\level-4.txt");
           
            Scanner scanner = null;
            try {
                scanner = new Scanner(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SubstringCounter.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (scanner.hasNextLine()) {
            try {
                String[] times = scanner.nextLine().split("\t");
                for (String time : times) {
                    timesArray.add(time);
                }
                System.out.println(timesArray);
            String text=null;
            String userids;
             String  itemid;
            
            ResultSet rs7; 
            Connection  con7 =  rating.prediction.based.dobc.getConne();
            Statement  st7 = (Statement) con7.createStatement();
            rs7 = (ResultSet) st7.executeQuery("SELECT *  FROM  "+sentimental+" where "+sentimental_itemid +"  = '"+useridd+"' ");
                  while(rs7.next())
                   {
                try {
                    userids = rs7.getString(sentimental_userid);
                    itemid = rs7.getString(sentimental_itemid);
                     String feed = rs7.getString(sentimental_feedback );
      text = feed;


     String[] regexp = times;
     for (int i=0;i<=regexp.length-1;i++)
     {
     System.out.println(regexp[i]);
         Pattern pattern = Pattern.compile(regexp[i]);
     Matcher matcher = pattern.matcher(text);
    
     for (count = 0; matcher.find(); count++)
         ;
     String status = "dsfds";
      String textt = "fgdfg";
     System.out.println("Count: " + count);
     Connection  con1 =  searchh.dobc.getConne();
    Statement st1=con1.createStatement();
    String sql="insert into userresult(item_id,user_id,count,word) values ('"+itemid+"','"+ userids+"','"+count+"','"+regexp[i]+"')";
    int x=st1.executeUpdate(sql);
    if(x!=0){
		System.out.println("not inserted");
	
		}
				else{
		
		System.out.println("uninserted");
		}
//        con.close();
//        st.close();
     }   
     
     System.out.println("userid: " + userids);
     System.out.println("Count: " +text);
     
            
        
                   }
                    catch (SQLException ex) {                  
                        Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
                    }                  
       
    }   
                  con7.close();
            } catch (SQLException ex) {
                Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            // TODO add your handling code here:
            
                
               
               
         Connection  con1 =  searchh.dobc.getConne();
        Statement st1=con1.createStatement();
        String sql=("truncate userresult");
        int x=st1.executeUpdate(sql);
        } catch (SQLException ex) {
            Logger.getLogger(usersentim.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("truncatede succes fully");
   
    
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
       new usersentimentfeed().setVisible(true);
      
    }//GEN-LAST:event_jButton9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(usersentim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(usersentim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(usersentim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(usersentim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new usersentim().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
